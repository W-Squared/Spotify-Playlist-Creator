name: Build, Test, and Release Web Application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup Python Environment
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4
    - name: Setup Python Environment
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint Python Code
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4
    - name: Setup Python Environment
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Bundle Application
      run: |
        zip -r release.zip .
    - name: Get Current Version
      id: get_version
      run: |
        git fetch --tags
        VERSION=$(git tag --list 'v*' | sort -V | tail -n 1)
        if [ -z "$VERSION" ]; then
          echo "::set-output name=version::v1.0.0"
        else
          BASE_VERSION=${VERSION%.*}
          PATCH_VERSION=${VERSION##*.}
          NEW_VERSION="$BASE_VERSION.$((PATCH_VERSION + 1))"
          echo "::set-output name=version::$NEW_VERSION"
        fi
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        files: release.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}